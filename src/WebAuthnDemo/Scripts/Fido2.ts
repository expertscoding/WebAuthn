/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.5.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export module Fido2 {

export class FidoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:5000";
    }

    makeCredentialOptions(username: string | null | undefined, displayName: string | null | undefined, attType: string | null | undefined, authType: string | null | undefined, requireResidentKey: boolean | undefined, userVerification: string | null | undefined): Promise<CredentialCreateOptions> {
        let url_ = this.baseUrl + "/Fido/MakeCredentialOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (username !== null && username !== undefined)
            content_.append("username", username.toString());
        if (displayName !== null && displayName !== undefined)
            content_.append("displayName", displayName.toString());
        if (attType !== null && attType !== undefined)
            content_.append("attType", attType.toString());
        if (authType !== null && authType !== undefined)
            content_.append("authType", authType.toString());
        if (requireResidentKey === null || requireResidentKey === undefined)
            throw new Error("The parameter 'requireResidentKey' cannot be null.");
        else
            content_.append("requireResidentKey", requireResidentKey.toString());
        if (userVerification !== null && userVerification !== undefined)
            content_.append("userVerification", userVerification.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMakeCredentialOptions(_response);
        });
    }

    protected processMakeCredentialOptions(response: Response): Promise<CredentialCreateOptions> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CredentialCreateOptions.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CredentialCreateOptions>(<any>null);
    }

    makeCredential(attestationResponse: AuthenticatorAttestationRawResponse): Promise<CredentialMakeResult> {
        let url_ = this.baseUrl + "/Fido/MakeCredential";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(attestationResponse);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMakeCredential(_response);
        });
    }

    protected processMakeCredential(response: Response): Promise<CredentialMakeResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CredentialMakeResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CredentialMakeResult>(<any>null);
    }

    assertionOptionsPost(username: string | null | undefined, userVerification: string | null | undefined): Promise<AssertionOptions> {
        let url_ = this.baseUrl + "/Fido/AssertionOptionsPost";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (username !== null && username !== undefined)
            content_.append("username", username.toString());
        if (userVerification !== null && userVerification !== undefined)
            content_.append("userVerification", userVerification.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAssertionOptionsPost(_response);
        });
    }

    protected processAssertionOptionsPost(response: Response): Promise<AssertionOptions> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssertionOptions.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssertionOptions>(<any>null);
    }

    makeAssertion(clientResponse: AuthenticatorAssertionRawResponse): Promise<AssertionVerificationResult> {
        let url_ = this.baseUrl + "/Fido/MakeAssertion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(clientResponse);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMakeAssertion(_response);
        });
    }

    protected processMakeAssertion(response: Response): Promise<AssertionVerificationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssertionVerificationResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssertionVerificationResult>(<any>null);
    }
}

export abstract class Fido2ResponseBase implements IFido2ResponseBase {
    status?: string | undefined;
    errorMessage?: string | undefined;

    constructor(data?: IFido2ResponseBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): Fido2ResponseBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Fido2ResponseBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["errorMessage"] = this.errorMessage;
        return data; 
    }
}

export interface IFido2ResponseBase {
    status?: string | undefined;
    errorMessage?: string | undefined;
}

export class CredentialCreateOptions extends Fido2ResponseBase implements ICredentialCreateOptions {
    rp?: PublicKeyCredentialRpEntity | undefined;
    user?: Fido2User | undefined;
    challenge?: string | undefined;
    pubKeyCredParams?: PubKeyCredParam[] | undefined;
    timeout!: number;
    attestation!: AttestationConveyancePreference;
    authenticatorSelection?: AuthenticatorSelection | undefined;
    excludeCredentials?: PublicKeyCredentialDescriptor[] | undefined;
    extensions?: AuthenticationExtensionsClientInputs | undefined;

    constructor(data?: ICredentialCreateOptions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rp = _data["rp"] ? PublicKeyCredentialRpEntity.fromJS(_data["rp"]) : <any>undefined;
            this.user = _data["user"] ? Fido2User.fromJS(_data["user"]) : <any>undefined;
            this.challenge = _data["challenge"];
            if (Array.isArray(_data["pubKeyCredParams"])) {
                this.pubKeyCredParams = [] as any;
                for (let item of _data["pubKeyCredParams"])
                    this.pubKeyCredParams!.push(PubKeyCredParam.fromJS(item));
            }
            this.timeout = _data["timeout"];
            this.attestation = _data["attestation"];
            this.authenticatorSelection = _data["authenticatorSelection"] ? AuthenticatorSelection.fromJS(_data["authenticatorSelection"]) : <any>undefined;
            if (Array.isArray(_data["excludeCredentials"])) {
                this.excludeCredentials = [] as any;
                for (let item of _data["excludeCredentials"])
                    this.excludeCredentials!.push(PublicKeyCredentialDescriptor.fromJS(item));
            }
            this.extensions = _data["extensions"] ? AuthenticationExtensionsClientInputs.fromJS(_data["extensions"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CredentialCreateOptions {
        data = typeof data === 'object' ? data : {};
        let result = new CredentialCreateOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rp"] = this.rp ? this.rp.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["challenge"] = this.challenge;
        if (Array.isArray(this.pubKeyCredParams)) {
            data["pubKeyCredParams"] = [];
            for (let item of this.pubKeyCredParams)
                data["pubKeyCredParams"].push(item.toJSON());
        }
        data["timeout"] = this.timeout;
        data["attestation"] = this.attestation;
        data["authenticatorSelection"] = this.authenticatorSelection ? this.authenticatorSelection.toJSON() : <any>undefined;
        if (Array.isArray(this.excludeCredentials)) {
            data["excludeCredentials"] = [];
            for (let item of this.excludeCredentials)
                data["excludeCredentials"].push(item.toJSON());
        }
        data["extensions"] = this.extensions ? this.extensions.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICredentialCreateOptions extends IFido2ResponseBase {
    rp?: PublicKeyCredentialRpEntity | undefined;
    user?: Fido2User | undefined;
    challenge?: string | undefined;
    pubKeyCredParams?: PubKeyCredParam[] | undefined;
    timeout: number;
    attestation: AttestationConveyancePreference;
    authenticatorSelection?: AuthenticatorSelection | undefined;
    excludeCredentials?: PublicKeyCredentialDescriptor[] | undefined;
    extensions?: AuthenticationExtensionsClientInputs | undefined;
}

export class PublicKeyCredentialRpEntity implements IPublicKeyCredentialRpEntity {
    id?: string | undefined;
    name?: string | undefined;
    icon?: string | undefined;

    constructor(data?: IPublicKeyCredentialRpEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.icon = _data["icon"];
        }
    }

    static fromJS(data: any): PublicKeyCredentialRpEntity {
        data = typeof data === 'object' ? data : {};
        let result = new PublicKeyCredentialRpEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        return data; 
    }
}

export interface IPublicKeyCredentialRpEntity {
    id?: string | undefined;
    name?: string | undefined;
    icon?: string | undefined;
}

export class Fido2User implements IFido2User {
    name?: string | undefined;
    id?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: IFido2User) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.id = _data["id"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): Fido2User {
        data = typeof data === 'object' ? data : {};
        let result = new Fido2User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface IFido2User {
    name?: string | undefined;
    id?: string | undefined;
    displayName?: string | undefined;
}

export class PubKeyCredParam implements IPubKeyCredParam {
    type!: PublicKeyCredentialType;
    alg!: number;

    constructor(data?: IPubKeyCredParam) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.alg = _data["alg"];
        }
    }

    static fromJS(data: any): PubKeyCredParam {
        data = typeof data === 'object' ? data : {};
        let result = new PubKeyCredParam();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["alg"] = this.alg;
        return data; 
    }
}

export interface IPubKeyCredParam {
    type: PublicKeyCredentialType;
    alg: number;
}

export enum PublicKeyCredentialType {
    PublicKey = "public-key",
}

export enum AttestationConveyancePreference {
    None = "none",
    Indirect = "indirect",
    Direct = "direct",
}

export class AuthenticatorSelection implements IAuthenticatorSelection {
    authenticatorAttachment?: AuthenticatorAttachment | undefined;
    requireResidentKey!: boolean;
    userVerification!: UserVerificationRequirement;

    constructor(data?: IAuthenticatorSelection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authenticatorAttachment = _data["authenticatorAttachment"];
            this.requireResidentKey = _data["requireResidentKey"];
            this.userVerification = _data["userVerification"];
        }
    }

    static fromJS(data: any): AuthenticatorSelection {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticatorSelection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticatorAttachment"] = this.authenticatorAttachment;
        data["requireResidentKey"] = this.requireResidentKey;
        data["userVerification"] = this.userVerification;
        return data; 
    }
}

export interface IAuthenticatorSelection {
    authenticatorAttachment?: AuthenticatorAttachment | undefined;
    requireResidentKey: boolean;
    userVerification: UserVerificationRequirement;
}

export enum AuthenticatorAttachment {
    Platform = "platform",
    CrossPlatform = "cross-platform",
}

export enum UserVerificationRequirement {
    Required = "required",
    Preferred = "preferred",
    Discouraged = "discouraged",
}

export class PublicKeyCredentialDescriptor implements IPublicKeyCredentialDescriptor {
    type?: PublicKeyCredentialType | undefined;
    id?: string | undefined;
    transports?: AuthenticatorTransport[] | undefined;

    constructor(data?: IPublicKeyCredentialDescriptor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.id = _data["id"];
            if (Array.isArray(_data["transports"])) {
                this.transports = [] as any;
                for (let item of _data["transports"])
                    this.transports!.push(item);
            }
        }
    }

    static fromJS(data: any): PublicKeyCredentialDescriptor {
        data = typeof data === 'object' ? data : {};
        let result = new PublicKeyCredentialDescriptor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["id"] = this.id;
        if (Array.isArray(this.transports)) {
            data["transports"] = [];
            for (let item of this.transports)
                data["transports"].push(item);
        }
        return data; 
    }
}

export interface IPublicKeyCredentialDescriptor {
    type?: PublicKeyCredentialType | undefined;
    id?: string | undefined;
    transports?: AuthenticatorTransport[] | undefined;
}

export enum AuthenticatorTransport {
    Usb = "usb",
    Nfc = "nfc",
    Ble = "ble",
    Internal = "internal",
    Lightning = "lightning",
}

export class AuthenticationExtensionsClientInputs implements IAuthenticationExtensionsClientInputs {
    exampleExtension?: any | undefined;
    appid?: string | undefined;
    txAuthSimple?: string | undefined;
    txAuthGenericArg?: TxAuthGenericArg | undefined;
    authnSel?: string[] | undefined;
    exts?: boolean | undefined;
    uvi?: boolean | undefined;
    loc?: boolean | undefined;
    uvm?: boolean | undefined;
    biometricPerfBounds?: AuthenticatorBiometricPerfBounds | undefined;

    constructor(data?: IAuthenticationExtensionsClientInputs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exampleExtension = _data["example.extension"];
            this.appid = _data["appid"];
            this.txAuthSimple = _data["txAuthSimple"];
            this.txAuthGenericArg = _data["txAuthGenericArg"] ? TxAuthGenericArg.fromJS(_data["txAuthGenericArg"]) : <any>undefined;
            if (Array.isArray(_data["authnSel"])) {
                this.authnSel = [] as any;
                for (let item of _data["authnSel"])
                    this.authnSel!.push(item);
            }
            this.exts = _data["exts"];
            this.uvi = _data["uvi"];
            this.loc = _data["loc"];
            this.uvm = _data["uvm"];
            this.biometricPerfBounds = _data["biometricPerfBounds"] ? AuthenticatorBiometricPerfBounds.fromJS(_data["biometricPerfBounds"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticationExtensionsClientInputs {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationExtensionsClientInputs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["example.extension"] = this.exampleExtension;
        data["appid"] = this.appid;
        data["txAuthSimple"] = this.txAuthSimple;
        data["txAuthGenericArg"] = this.txAuthGenericArg ? this.txAuthGenericArg.toJSON() : <any>undefined;
        if (Array.isArray(this.authnSel)) {
            data["authnSel"] = [];
            for (let item of this.authnSel)
                data["authnSel"].push(item);
        }
        data["exts"] = this.exts;
        data["uvi"] = this.uvi;
        data["loc"] = this.loc;
        data["uvm"] = this.uvm;
        data["biometricPerfBounds"] = this.biometricPerfBounds ? this.biometricPerfBounds.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAuthenticationExtensionsClientInputs {
    exampleExtension?: any | undefined;
    appid?: string | undefined;
    txAuthSimple?: string | undefined;
    txAuthGenericArg?: TxAuthGenericArg | undefined;
    authnSel?: string[] | undefined;
    exts?: boolean | undefined;
    uvi?: boolean | undefined;
    loc?: boolean | undefined;
    uvm?: boolean | undefined;
    biometricPerfBounds?: AuthenticatorBiometricPerfBounds | undefined;
}

export class TxAuthGenericArg implements ITxAuthGenericArg {
    contentType?: string | undefined;
    content?: string | undefined;

    constructor(data?: ITxAuthGenericArg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.contentType = _data["contentType"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): TxAuthGenericArg {
        data = typeof data === 'object' ? data : {};
        let result = new TxAuthGenericArg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["content"] = this.content;
        return data; 
    }
}

export interface ITxAuthGenericArg {
    contentType?: string | undefined;
    content?: string | undefined;
}

export class AuthenticatorBiometricPerfBounds implements IAuthenticatorBiometricPerfBounds {
    far!: number;
    frr!: number;

    constructor(data?: IAuthenticatorBiometricPerfBounds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.far = _data["far"];
            this.frr = _data["frr"];
        }
    }

    static fromJS(data: any): AuthenticatorBiometricPerfBounds {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticatorBiometricPerfBounds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["far"] = this.far;
        data["frr"] = this.frr;
        return data; 
    }
}

export interface IAuthenticatorBiometricPerfBounds {
    far: number;
    frr: number;
}

export class CredentialMakeResult extends Fido2ResponseBase implements ICredentialMakeResult {
    result?: AttestationVerificationSuccess | undefined;

    constructor(data?: ICredentialMakeResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.result = _data["result"] ? AttestationVerificationSuccess.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CredentialMakeResult {
        data = typeof data === 'object' ? data : {};
        let result = new CredentialMakeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ICredentialMakeResult extends IFido2ResponseBase {
    result?: AttestationVerificationSuccess | undefined;
}

export class AssertionVerificationResult extends Fido2ResponseBase implements IAssertionVerificationResult {
    credentialId?: string | undefined;
    counter!: number;

    constructor(data?: IAssertionVerificationResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.credentialId = _data["credentialId"];
            this.counter = _data["counter"];
        }
    }

    static fromJS(data: any): AssertionVerificationResult {
        data = typeof data === 'object' ? data : {};
        let result = new AssertionVerificationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["credentialId"] = this.credentialId;
        data["counter"] = this.counter;
        super.toJSON(data);
        return data; 
    }
}

export interface IAssertionVerificationResult extends IFido2ResponseBase {
    credentialId?: string | undefined;
    counter: number;
}

export class AttestationVerificationSuccess extends AssertionVerificationResult implements IAttestationVerificationSuccess {
    publicKey?: string | undefined;
    user?: Fido2User | undefined;
    credType?: string | undefined;
    aaguid!: string;

    constructor(data?: IAttestationVerificationSuccess) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.publicKey = _data["publicKey"];
            this.user = _data["user"] ? Fido2User.fromJS(_data["user"]) : <any>undefined;
            this.credType = _data["credType"];
            this.aaguid = _data["aaguid"];
        }
    }

    static fromJS(data: any): AttestationVerificationSuccess {
        data = typeof data === 'object' ? data : {};
        let result = new AttestationVerificationSuccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicKey"] = this.publicKey;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["credType"] = this.credType;
        data["aaguid"] = this.aaguid;
        super.toJSON(data);
        return data; 
    }
}

export interface IAttestationVerificationSuccess extends IAssertionVerificationResult {
    publicKey?: string | undefined;
    user?: Fido2User | undefined;
    credType?: string | undefined;
    aaguid: string;
}

export class AuthenticatorAttestationRawResponse implements IAuthenticatorAttestationRawResponse {
    id?: string | undefined;
    rawId?: string | undefined;
    type?: PublicKeyCredentialType | undefined;
    response?: ResponseData | undefined;
    extensions?: AuthenticationExtensionsClientOutputs | undefined;

    constructor(data?: IAuthenticatorAttestationRawResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.rawId = _data["rawId"];
            this.type = _data["type"];
            this.response = _data["response"] ? ResponseData.fromJS(_data["response"]) : <any>undefined;
            this.extensions = _data["extensions"] ? AuthenticationExtensionsClientOutputs.fromJS(_data["extensions"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticatorAttestationRawResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticatorAttestationRawResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rawId"] = this.rawId;
        data["type"] = this.type;
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["extensions"] = this.extensions ? this.extensions.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAuthenticatorAttestationRawResponse {
    id?: string | undefined;
    rawId?: string | undefined;
    type?: PublicKeyCredentialType | undefined;
    response?: ResponseData | undefined;
    extensions?: AuthenticationExtensionsClientOutputs | undefined;
}

export class ResponseData implements IResponseData {
    attestationObject?: string | undefined;
    clientDataJson?: string | undefined;

    constructor(data?: IResponseData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attestationObject = _data["attestationObject"];
            this.clientDataJson = _data["clientDataJson"];
        }
    }

    static fromJS(data: any): ResponseData {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attestationObject"] = this.attestationObject;
        data["clientDataJson"] = this.clientDataJson;
        return data; 
    }
}

export interface IResponseData {
    attestationObject?: string | undefined;
    clientDataJson?: string | undefined;
}

export class AuthenticationExtensionsClientOutputs implements IAuthenticationExtensionsClientOutputs {
    exampleExtension?: any | undefined;
    appid!: boolean;
    txAuthSimple?: string | undefined;
    txAuthGenericArg?: string | undefined;
    authnSel!: boolean;
    exts?: string[] | undefined;
    uvi?: string | undefined;
    loc?: GeoCoordinate | undefined;
    uvm?: number[][] | undefined;
    biometricPerfBounds!: boolean;

    constructor(data?: IAuthenticationExtensionsClientOutputs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exampleExtension = _data["example.extension"];
            this.appid = _data["appid"];
            this.txAuthSimple = _data["txAuthSimple"];
            this.txAuthGenericArg = _data["txAuthGenericArg"];
            this.authnSel = _data["authnSel"];
            if (Array.isArray(_data["exts"])) {
                this.exts = [] as any;
                for (let item of _data["exts"])
                    this.exts!.push(item);
            }
            this.uvi = _data["uvi"];
            this.loc = _data["loc"] ? GeoCoordinate.fromJS(_data["loc"]) : <any>undefined;
            if (Array.isArray(_data["uvm"])) {
                this.uvm = [] as any;
                for (let item of _data["uvm"])
                    this.uvm!.push(item);
            }
            this.biometricPerfBounds = _data["biometricPerfBounds"];
        }
    }

    static fromJS(data: any): AuthenticationExtensionsClientOutputs {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationExtensionsClientOutputs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["example.extension"] = this.exampleExtension;
        data["appid"] = this.appid;
        data["txAuthSimple"] = this.txAuthSimple;
        data["txAuthGenericArg"] = this.txAuthGenericArg;
        data["authnSel"] = this.authnSel;
        if (Array.isArray(this.exts)) {
            data["exts"] = [];
            for (let item of this.exts)
                data["exts"].push(item);
        }
        data["uvi"] = this.uvi;
        data["loc"] = this.loc ? this.loc.toJSON() : <any>undefined;
        if (Array.isArray(this.uvm)) {
            data["uvm"] = [];
            for (let item of this.uvm)
                data["uvm"].push(item);
        }
        data["biometricPerfBounds"] = this.biometricPerfBounds;
        return data; 
    }
}

export interface IAuthenticationExtensionsClientOutputs {
    exampleExtension?: any | undefined;
    appid: boolean;
    txAuthSimple?: string | undefined;
    txAuthGenericArg?: string | undefined;
    authnSel: boolean;
    exts?: string[] | undefined;
    uvi?: string | undefined;
    loc?: GeoCoordinate | undefined;
    uvm?: number[][] | undefined;
    biometricPerfBounds: boolean;
}

export class GeoCoordinate implements IGeoCoordinate {
    latitude!: number;
    longitude!: number;
    horizontalAccuracy!: number;
    verticalAccuracy!: number;
    speed!: number;
    course!: number;
    isUnknown!: boolean;
    altitude!: number;

    constructor(data?: IGeoCoordinate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.horizontalAccuracy = _data["horizontalAccuracy"];
            this.verticalAccuracy = _data["verticalAccuracy"];
            this.speed = _data["speed"];
            this.course = _data["course"];
            this.isUnknown = _data["isUnknown"];
            this.altitude = _data["altitude"];
        }
    }

    static fromJS(data: any): GeoCoordinate {
        data = typeof data === 'object' ? data : {};
        let result = new GeoCoordinate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["horizontalAccuracy"] = this.horizontalAccuracy;
        data["verticalAccuracy"] = this.verticalAccuracy;
        data["speed"] = this.speed;
        data["course"] = this.course;
        data["isUnknown"] = this.isUnknown;
        data["altitude"] = this.altitude;
        return data; 
    }
}

export interface IGeoCoordinate {
    latitude: number;
    longitude: number;
    horizontalAccuracy: number;
    verticalAccuracy: number;
    speed: number;
    course: number;
    isUnknown: boolean;
    altitude: number;
}

export class AssertionOptions extends Fido2ResponseBase implements IAssertionOptions {
    challenge?: string | undefined;
    timeout!: number;
    rpId?: string | undefined;
    allowCredentials?: PublicKeyCredentialDescriptor[] | undefined;
    userVerification?: UserVerificationRequirement | undefined;
    extensions?: AuthenticationExtensionsClientInputs | undefined;

    constructor(data?: IAssertionOptions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.challenge = _data["challenge"];
            this.timeout = _data["timeout"];
            this.rpId = _data["rpId"];
            if (Array.isArray(_data["allowCredentials"])) {
                this.allowCredentials = [] as any;
                for (let item of _data["allowCredentials"])
                    this.allowCredentials!.push(PublicKeyCredentialDescriptor.fromJS(item));
            }
            this.userVerification = _data["userVerification"];
            this.extensions = _data["extensions"] ? AuthenticationExtensionsClientInputs.fromJS(_data["extensions"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AssertionOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AssertionOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["challenge"] = this.challenge;
        data["timeout"] = this.timeout;
        data["rpId"] = this.rpId;
        if (Array.isArray(this.allowCredentials)) {
            data["allowCredentials"] = [];
            for (let item of this.allowCredentials)
                data["allowCredentials"].push(item.toJSON());
        }
        data["userVerification"] = this.userVerification;
        data["extensions"] = this.extensions ? this.extensions.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IAssertionOptions extends IFido2ResponseBase {
    challenge?: string | undefined;
    timeout: number;
    rpId?: string | undefined;
    allowCredentials?: PublicKeyCredentialDescriptor[] | undefined;
    userVerification?: UserVerificationRequirement | undefined;
    extensions?: AuthenticationExtensionsClientInputs | undefined;
}

export class AuthenticatorAssertionRawResponse implements IAuthenticatorAssertionRawResponse {
    id?: string | undefined;
    rawId?: string | undefined;
    response?: AssertionResponse | undefined;
    type?: PublicKeyCredentialType | undefined;
    extensions?: AuthenticationExtensionsClientOutputs | undefined;

    constructor(data?: IAuthenticatorAssertionRawResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.rawId = _data["rawId"];
            this.response = _data["response"] ? AssertionResponse.fromJS(_data["response"]) : <any>undefined;
            this.type = _data["type"];
            this.extensions = _data["extensions"] ? AuthenticationExtensionsClientOutputs.fromJS(_data["extensions"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticatorAssertionRawResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticatorAssertionRawResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rawId"] = this.rawId;
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["extensions"] = this.extensions ? this.extensions.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAuthenticatorAssertionRawResponse {
    id?: string | undefined;
    rawId?: string | undefined;
    response?: AssertionResponse | undefined;
    type?: PublicKeyCredentialType | undefined;
    extensions?: AuthenticationExtensionsClientOutputs | undefined;
}

export class AssertionResponse implements IAssertionResponse {
    authenticatorData?: string | undefined;
    signature?: string | undefined;
    clientDataJson?: string | undefined;
    userHandle?: string | undefined;

    constructor(data?: IAssertionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authenticatorData = _data["authenticatorData"];
            this.signature = _data["signature"];
            this.clientDataJson = _data["clientDataJson"];
            this.userHandle = _data["userHandle"];
        }
    }

    static fromJS(data: any): AssertionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AssertionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticatorData"] = this.authenticatorData;
        data["signature"] = this.signature;
        data["clientDataJson"] = this.clientDataJson;
        data["userHandle"] = this.userHandle;
        return data; 
    }
}

export interface IAssertionResponse {
    authenticatorData?: string | undefined;
    signature?: string | undefined;
    clientDataJson?: string | undefined;
    userHandle?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}